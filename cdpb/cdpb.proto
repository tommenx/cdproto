syntax = "proto3";
package cdpb;

option go_package = "github.com/tommenx/cdproto/cdpb";

import "base.proto";

////存储设备的类型
//enum StorageType {
//    NVM = 0;
//    SSD = 1;
//    HDD = 2;
//}
//
////上报资源的类型
//enum Kind {
//    Capability = 0;
//    Allocation = 1;
//    Remaining = 2;
//}
//
////资源的种类
//enum ResourceType {
//    ReadBps = 0;
//    ReadIops = 1;
//    WriteBps = 2;
//    WriteIops = 3;
//    StorageSpace = 4;
//}

//对于存储资源的单位默认为G
//对于磁盘的默认单位为MB
message Storage {
    string level = 1; // 存储的级别，SSD,HDD,NVM
    string name = 2; // 对应卷组的名字
    map<string, int64> resource = 3; //总资源
}

message Node {
    repeated Storage storage = 1; // 每一个存储的资源
}

message PodResource {
    string name = 1; // pod的名字
    string namespace = 2; //pod的命名空间
    string node = 3; // 所属的node 
    string dockerId = 4; // 对应的docker的id，在catchup填充，lazy的方式
    string cgroupPath = 5; // cgroup文件的地址，在catchup填充，lazy的方式
    map<string, int64> request_resource = 6;
    string level = 7;
}

message Volume {
    string name = 1; // pv的名字
    string volume_group = 2; // 卷组vg的名字，对应Storage中的name
    string uuid = 3; // 对应id
    string maj = 4; // 主设备号
    string min = 5; // 副设备号
    string logical_volume = 6; // 对于的逻辑卷的名字
    int32 size = 7;
}

message PutNodeStorageRequest {
    string name = 1; //节点的名称
    string kind = 2; //上报的类型，capability,allocation,remaining
    Node node = 3; // 存储的详细情况
    base.Base base = 255;
}
message PutNodeStorageResponse {
    base.BaseResp base_resp = 255;
}

message GetNodeStorageRequest {
    string kind = 1;
    string node = 2;
    base.Base base = 255;
}

message GetNodeStorageResponse {
    map<string, Node> nodes = 1;
    base.BaseResp base_resp = 255;
}

message PutPodResourceRequest {
    PodResource pod = 1;
    int32 operation = 2; // 0表示删除，1表示新增
    base.Base base = 255;
}

message PutPodResourceResponse {
    base.BaseResp base_resp = 255;
}

message PutVolumeRequest {
    Volume volume = 1;
    string pv = 2;
    int32 operation = 3; // 0表示删除，1表示新增
    base.Base base = 255;
}

message PutVolumeResponse {
    base.BaseResp base_resp = 255;
}

message GetVolumeRequest {
    string namespace = 1; // pvc命名空间
    string name = 2; // pvc的名字，pvc和pv是1:1对应
    base.Base base = 255;
}

message GetVolumeResponse {
    Volume volume = 1;
    base.BaseResp base_resp = 255;
}

message GetPodResourceRequest {
    string namespace = 1;
    string pod = 2;
    base.Base base = 255;
}

message GetPodResourceResponse {
    PodResource pod = 1;
    base.BaseResp base_resp = 255;
}

service Coordinator {
    rpc PutNodeStorage (PutNodeStorageRequest) returns (PutNodeStorageResponse);
    rpc GetNodeStorage (GetNodeStorageRequest) returns (GetNodeStorageResponse);
    rpc PutPodResource (PutPodResourceRequest) returns (PutPodResourceResponse);
    rpc GetPodResource (GetPodResourceRequest) returns (GetPodResourceResponse);
    rpc PutVolume (PutVolumeRequest) returns (PutVolumeResponse);
    rpc GetVolume (GetVolumeRequest) returns (GetVolumeResponse);
}








